/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | 'Pacific/Midway'
  | 'Pacific/Niue'
  | 'Pacific/Honolulu'
  | 'Pacific/Rarotonga'
  | 'America/Anchorage'
  | 'Pacific/Gambier'
  | 'America/Los_Angeles'
  | 'America/Tijuana'
  | 'America/Denver'
  | 'America/Phoenix'
  | 'America/Chicago'
  | 'America/Guatemala'
  | 'America/New_York'
  | 'America/Bogota'
  | 'America/Caracas'
  | 'America/Santiago'
  | 'America/Buenos_Aires'
  | 'America/Sao_Paulo'
  | 'Atlantic/South_Georgia'
  | 'Atlantic/Azores'
  | 'Atlantic/Cape_Verde'
  | 'Europe/London'
  | 'Europe/Berlin'
  | 'Africa/Lagos'
  | 'Europe/Athens'
  | 'Africa/Cairo'
  | 'Europe/Moscow'
  | 'Asia/Riyadh'
  | 'Asia/Dubai'
  | 'Asia/Baku'
  | 'Asia/Karachi'
  | 'Asia/Tashkent'
  | 'Asia/Calcutta'
  | 'Asia/Dhaka'
  | 'Asia/Almaty'
  | 'Asia/Jakarta'
  | 'Asia/Bangkok'
  | 'Asia/Shanghai'
  | 'Asia/Singapore'
  | 'Asia/Tokyo'
  | 'Asia/Seoul'
  | 'Australia/Brisbane'
  | 'Australia/Sydney'
  | 'Pacific/Guam'
  | 'Pacific/Noumea'
  | 'Pacific/Auckland'
  | 'Pacific/Fiji';

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  blocks: {};
  collections: {
    users: User;
    projects: Project;
    services: Service;
    servers: Server;
    sshKeys: SshKey;
    gitProviders: GitProvider;
    deployments: Deployment;
    cloudProviderAccounts: CloudProviderAccount;
    templates: Template;
    securityGroups: SecurityGroup;
    dockerRegistries: DockerRegistry;
    tenants: Tenant;
    backups: Backup;
    banners: Banner;
    'payload-jobs': PayloadJob;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {
    projects: {
      services: 'services';
    };
    services: {
      deployments: 'deployments';
    };
  };
  collectionsSelect: {
    users: UsersSelect<false> | UsersSelect<true>;
    projects: ProjectsSelect<false> | ProjectsSelect<true>;
    services: ServicesSelect<false> | ServicesSelect<true>;
    servers: ServersSelect<false> | ServersSelect<true>;
    sshKeys: SshKeysSelect<false> | SshKeysSelect<true>;
    gitProviders: GitProvidersSelect<false> | GitProvidersSelect<true>;
    deployments: DeploymentsSelect<false> | DeploymentsSelect<true>;
    cloudProviderAccounts: CloudProviderAccountsSelect<false> | CloudProviderAccountsSelect<true>;
    templates: TemplatesSelect<false> | TemplatesSelect<true>;
    securityGroups: SecurityGroupsSelect<false> | SecurityGroupsSelect<true>;
    dockerRegistries: DockerRegistriesSelect<false> | DockerRegistriesSelect<true>;
    tenants: TenantsSelect<false> | TenantsSelect<true>;
    backups: BackupsSelect<false> | BackupsSelect<true>;
    banners: BannersSelect<false> | BannersSelect<true>;
    'payload-jobs': PayloadJobsSelect<false> | PayloadJobsSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: string;
  };
  globals: {};
  globalsSelect: {};
  locale: null;
  user: User & {
    collection: 'users';
  };
  jobs: {
    tasks: {
      checkServersSshConnections: CheckServersSshConnections;
      inline: {
        input: unknown;
        output: unknown;
      };
    };
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: string;
  username?: string | null;
  avatarUrl?: string | null;
  onboarded?: boolean | null;
  role?: ('admin' | 'user' | 'demo')[] | null;
  tenants?:
    | {
        tenant: string | Tenant;
        roles: ('tenant-admin' | 'tenant-user')[];
        id?: string | null;
      }[]
    | null;
  deletedAt?: string | null;
  updatedAt: string;
  createdAt: string;
  enableAPIKey?: boolean | null;
  apiKey?: string | null;
  apiKeyIndex?: string | null;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "tenants".
 */
export interface Tenant {
  id: string;
  name: string;
  slug: string;
  subdomain: string;
  deletedAt?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "projects".
 */
export interface Project {
  id: string;
  _order?: string | null;
  tenant?: (string | null) | Tenant;
  /**
   * Enter the name of the project.
   */
  name: string;
  /**
   * Provide a brief description of the project.
   */
  description?: string | null;
  /**
   * Attach a server, all the servers in this project will be deployed in that server
   */
  server: string | Server;
  services?: {
    docs?: (string | Service)[];
    hasNextPage?: boolean;
    totalDocs?: number;
  };
  deletedAt?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "servers".
 */
export interface Server {
  id: string;
  tenant?: (string | null) | Tenant;
  /**
   * Enter the name of the service.
   */
  name: string;
  /**
   * Provide a brief description of the service.
   */
  description?: string | null;
  /**
   * Select the preferred connection method for this server.
   */
  preferConnectionType: 'ssh' | 'tailscale';
  /**
   * Required when SSH is the preferred connection type.
   */
  sshKey?: (string | null) | SshKey;
  /**
   * Enter the IP address of the server.
   */
  ip?: string | null;
  /**
   * Enter the Port of the server.
   */
  port?: number | null;
  /**
   * Enter the username of the server.
   */
  username: string;
  /**
   * Server hostname (required for Tailscale connections).
   */
  hostname?: string | null;
  /**
   * Tailscale connection configuration. Fields are required when Tailscale is the preferred connection type.
   */
  tailscale?: {
    /**
     * Legacy identifier for the device
     */
    id?: string | null;
    /**
     * Preferred identifier for the device (e.g., n292kg92CNTRL)
     */
    nodeId?: string | null;
    /**
     * The MagicDNS name of the device (e.g., pangolin.tailfe8c.ts.net)
     */
    name?: string | null;
    /**
     * The machine name in Tailscale admin console
     */
    tailscaleHostname?: string | null;
    /**
     * List of Tailscale IP addresses (IPv4 and IPv6)
     */
    addresses?: string[] | null;
    /**
     * Whether device is not allowed to accept connections over Tailscale
     */
    blocksIncomingConnections?: boolean | null;
    /**
     * Operating system the device is running (e.g., linux)
     */
    os?: string | null;
    /**
     * When the device was added to the tailnet
     */
    created?: string | null;
    /**
     * Tailscale authentication key (one-time use)
     */
    authKey?: string | null;
    /**
     * Expiration date of the device auth key
     */
    expires?: string | null;
    /**
     * Store the complete JSON response from Tailscale API
     */
    completeApiResponse?:
      | {
          [k: string]: unknown;
        }
      | unknown[]
      | string
      | number
      | boolean
      | null;
  };
  plugins?:
    | {
        name: string;
        version: string;
        status: 'enabled' | 'disabled';
        configuration?:
          | {
              [k: string]: unknown;
            }
          | unknown[]
          | string
          | number
          | boolean
          | null;
        id?: string | null;
      }[]
    | null;
  domains?:
    | {
        domain: string;
        default: boolean;
        synced: boolean;
        id?: string | null;
      }[]
    | null;
  onboarded?: boolean | null;
  provider: 'digitalocean' | 'aws' | 'gcp' | 'azure' | 'intake' | 'other';
  cloudProviderAccount?: (string | null) | CloudProviderAccount;
  /**
   * AWS EC2 instance details
   */
  awsEc2Details?: {
    /**
     * The EC2 instance ID (e.g., i-1234567890abcdef0)
     */
    instanceId?: string | null;
    /**
     * The AWS region where the instance is deployed (e.g., us-east-1)
     */
    region?: string | null;
    /**
     * The Amazon Machine Image (AMI) ID used to launch the instance
     */
    imageId?: string | null;
    /**
     * The EC2 instance type (e.g., t2.micro, m5.large)
     */
    instanceType?: string | null;
    /**
     * The size of the root volume in GB
     */
    diskSize?: number | null;
    /**
     * Security groups associated with this instance
     */
    securityGroups?: (string | SecurityGroup)[] | null;
    /**
     * When the instance was launched
     */
    launchTime?: string | null;
    /**
     * Current state of the instance (e.g., running, stopped)
     */
    state?: string | null;
    /**
     * The subnet where the instance is running
     */
    subnetId?: string | null;
    /**
     * The VPC where the instance is running
     */
    vpcId?: string | null;
    /**
     * The public DNS name assigned to the instance
     */
    publicDnsName?: string | null;
    /**
     * The private DNS name assigned to the instance
     */
    privateDnsName?: string | null;
    /**
     * The private IP address assigned to the instance
     */
    privateIpAddress?: string | null;
    /**
     * The public IP address assigned to the instance
     */
    publicIpAddress?: string | null;
    /**
     * The key pair used to launch the instance
     */
    keyName?: string | null;
    /**
     * The architecture of the instance (e.g., x86_64, arm64)
     */
    architecture?: string | null;
  };
  /**
   * inTake Vps details
   */
  intakeVpsDetails?: {
    id?: string | null;
    instanceId?: number | null;
    status?:
      | (
          | 'provisioning'
          | 'uninstalled'
          | 'running'
          | 'stopped'
          | 'error'
          | 'installing'
          | 'unknown'
          | 'manual_provisioning'
          | 'product_not_available'
          | 'verification_required'
          | 'rescue'
          | 'pending_payment'
          | 'other'
          | 'reset_password'
        )
      | null;
<<<<<<< HEAD
    next_billing_date?: string | null;  
=======
    next_billing_date?: string | null;
>>>>>>> 7bb03aebf042f90ee92fd58b29540d9d493dcafd
  };
  /**
   * Connection details for the server
   */
  connection?: {
    status?: ('success' | 'failed' | 'not-checked-yet') | null;
    lastChecked?: string | null;
  };
  deletedAt?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "sshKeys".
 */
export interface SshKey {
  id: string;
  tenant?: (string | null) | Tenant;
  /**
   * Enter the name of the ssh key.
   */
  name: string;
  /**
   * Provide a brief description of the ssh key.
   */
  description?: string | null;
  publicKey: string;
  privateKey: string;
  deletedAt?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "cloudProviderAccounts".
 */
export interface CloudProviderAccount {
  id: string;
  tenant?: (string | null) | Tenant;
  name: string;
  type: 'inTake' | 'aws' | 'azure' | 'gcp' | 'digitalocean';
  inTakeDetails?: {
    accessToken: string;
  };
  awsDetails?: {
    accessKeyId: string;
    secretAccessKey: string;
  };
  gcpDetails?: {
    /**
     * Paste your GCP service account JSON key here
     */
    serviceAccountKey: string;
    projectId: string;
  };
  digitaloceanDetails?: {
    /**
     * Personal Access Token from DigitalOcean API settings
     */
    accessToken: string;
  };
  azureDetails?: {
    clientId: string;
    clientSecret: string;
    tenantId: string;
    subscriptionId: string;
  };
  deletedAt?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "securityGroups".
 */
export interface SecurityGroup {
  id: string;
  tenant?: (string | null) | Tenant;
  name: string;
  description: string;
  cloudProvider?: ('aws' | 'azure' | 'gcp' | 'digitalocean') | null;
  cloudProviderAccount?: (string | null) | CloudProviderAccount;
  inboundRules?:
    | {
        description?: string | null;
        type:
          | 'all-traffic'
          | 'all-tcp'
          | 'all-udp'
          | 'ssh'
          | 'http'
          | 'https'
          | 'custom-tcp'
          | 'custom-udp'
          | 'icmp'
          | 'icmpv6'
          | 'smtp'
          | 'pop3'
          | 'imap'
          | 'ms-sql'
          | 'mysql-aurora'
          | 'postgresql'
          | 'dns-udp'
          | 'rdp'
          | 'nfs'
          | 'custom-protocol';
        protocol?: string | null;
        fromPort?: number | null;
        toPort?: number | null;
        sourceType: 'my-ip' | 'anywhere-ipv4' | 'anywhere-ipv6' | 'custom';
        /**
         * CIDR notation (e.g., 0.0.0.0/0 for anywhere)
         */
        source: string;
        /**
         * Auto-generated after creation
         */
        securityGroupRuleId?: string | null;
        id?: string | null;
      }[]
    | null;
  outboundRules?:
    | {
        description?: string | null;
        type:
          | 'all-traffic'
          | 'all-tcp'
          | 'all-udp'
          | 'ssh'
          | 'http'
          | 'https'
          | 'custom-tcp'
          | 'custom-udp'
          | 'icmp'
          | 'icmpv6'
          | 'smtp'
          | 'pop3'
          | 'imap'
          | 'ms-sql'
          | 'mysql-aurora'
          | 'postgresql'
          | 'dns-udp'
          | 'rdp'
          | 'nfs'
          | 'custom-protocol';
        protocol?: string | null;
        fromPort?: number | null;
        toPort?: number | null;
        destinationType: 'my-ip' | 'anywhere-ipv4' | 'anywhere-ipv6' | 'custom';
        /**
         * CIDR notation (e.g., 0.0.0.0/0 for anywhere)
         */
        destination: string;
        /**
         * Auto-generated after creation
         */
        securityGroupRuleId?: string | null;
        id?: string | null;
      }[]
    | null;
  tags?:
    | {
        key: string;
        value?: string | null;
        id?: string | null;
      }[]
    | null;
  /**
   * Auto-generated by cloud provider
   */
  securityGroupId?: string | null;
  syncStatus?: ('in-sync' | 'pending' | 'failed' | 'start-sync') | null;
  lastSyncedAt?: string | null;
  deletedAt?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "services".
 */
export interface Service {
  id: string;
  tenant?: (string | null) | Tenant;
  /**
   * Select the project associated with this service.
   */
  project: string | Project;
  backup?: (string | null) | Backup;
  /**
   * Enter the name of the service.
   */
  name: string;
  /**
   * Provide a brief description of the service.
   */
  description?: string | null;
  type: 'database' | 'app' | 'docker';
  variables?:
    | {
        key: string;
        value: string;
        id?: string | null;
      }[]
    | null;
  volumes?:
    | {
        hostPath: string;
        containerPath: string;
        created?: boolean | null;
        id?: string | null;
      }[]
    | null;
  populatedVariables?: string | null;
  builder?: ('railpack' | 'nixpacks' | 'dockerfile' | 'herokuBuildPacks' | 'buildPacks') | null;
  provider?: (string | null) | GitProvider;
  providerType?: ('github' | 'gitlab' | 'bitbucket') | null;
  githubSettings?: {
    repository: string;
    owner: string;
    branch: string;
    buildPath: string;
    port?: number | null;
  };
  databaseDetails?: {
    type?: ('postgres' | 'mongo' | 'mysql' | 'redis' | 'mariadb') | null;
    username?: string | null;
    password?: string | null;
    host?: string | null;
    port?: string | null;
    connectionUrl?: string | null;
    version?: string | null;
    status?: ('running' | 'missing' | 'exited') | null;
    exposedPorts?: string[] | null;
  };
  dockerDetails?: {
    /**
     * Enter the docker-registry URL: ghrc://contentql/pin-bolt:latest
     */
    url?: string | null;
    account?: (string | null) | DockerRegistry;
    ports?:
      | {
          hostPort: number;
          containerPort: number;
          scheme: 'http' | 'https';
          id?: string | null;
        }[]
      | null;
  };
  domains?:
    | {
        domain: string;
        default: boolean;
        synced: boolean;
        autoRegenerateSSL?: boolean | null;
        certificateType?: ('letsencrypt' | 'none') | null;
        id?: string | null;
      }[]
    | null;
  deployments?: {
    docs?: (string | Deployment)[];
    hasNextPage?: boolean;
    totalDocs?: number;
  };
  deletedAt?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "backups".
 */
export interface Backup {
  id: string;
  tenant?: (string | null) | Tenant;
  /**
   * Adding the service for which backup is related to
   */
  service: string | Service;
  type?: ('external' | 'internal') | null;
  backupName?: string | null;
  status: 'in-progress' | 'failed' | 'success';
  deletedAt?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "gitProviders".
 */
export interface GitProvider {
  id: string;
  tenant?: (string | null) | Tenant;
  type: 'github' | 'gitlab' | 'bitbucket';
  github?: {
    appName: string;
    appUrl: string;
    appId: number;
    clientId: string;
    clientSecret: string;
    installationId?: string | null;
    privateKey: string;
    webhookSecret: string;
    installationToken?: string | null;
    tokenExpiration?: string | null;
  };
  deletedAt?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "dockerRegistries".
 */
export interface DockerRegistry {
  id: string;
  tenant?: (string | null) | Tenant;
  name: string;
  type: 'docker' | 'github' | 'digitalocean' | 'quay';
  username: string;
  password: string;
  deletedAt?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "deployments".
 */
export interface Deployment {
  id: string;
  /**
   * Adding the service for which deployment is related to
   */
  service: string | Service;
  status: 'queued' | 'building' | 'failed' | 'success';
  logs?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  deletedAt?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "templates".
 */
export interface Template {
  id: string;
  tenant?: (string | null) | Tenant;
  name: string;
  description?: string | null;
  imageUrl?: string | null;
  services?:
    | {
        type: 'app' | 'database' | 'docker';
        provider?: (string | null) | GitProvider;
        providerType?: ('github' | 'gitlab' | 'bitbucket') | null;
        githubSettings?: {
          repository: string;
          owner: string;
          branch: string;
          buildPath: string;
          port?: number | null;
        };
        builder?: ('railpack' | 'nixpacks' | 'dockerfile' | 'herokuBuildPacks' | 'buildPacks') | null;
        /**
         * select database you want
         */
        databaseDetails?: {
          type: 'postgres' | 'mongo' | 'mysql' | 'redis' | 'mariadb';
          exposedPorts?: string[] | null;
        };
        dockerDetails?: {
          /**
           * Enter the docker-registry URL: ghrc://contentql/pin-bolt:latest
           */
          url?: string | null;
          account?: (string | null) | DockerRegistry;
          ports?:
            | {
                hostPort: number;
                containerPort: number;
                scheme: 'http' | 'https';
                id?: string | null;
              }[]
            | null;
        };
        name: string;
        description?: string | null;
        volumes?:
          | {
              hostPath: string;
              containerPath: string;
              id?: string | null;
            }[]
          | null;
        variables?:
          | {
              key: string;
              value: string;
              id?: string | null;
            }[]
          | null;
        id?: string | null;
      }[]
    | null;
  isPublished?: boolean | null;
  publishedTemplateId?: string | null;
  deletedAt?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "banners".
 */
export interface Banner {
  id: string;
  /**
   * A unique name for the banner, used for identification and management purposes.
   */
  name?: string | null;
  /**
   * Select the scope of the banner. Global banners are visible to all users, while user-specific banners are only visible to users of a specific tenant.
   */
  scope: 'global' | 'user-specific';
  /**
   * Select the tenant for which this banner is applicable. This is only required if the scope is set to "User-specific".
   */
  tenant?: (string | null) | Tenant;
  /**
   * Select the type of banner. This helps categorize the banner for better management and display.
   */
  type: 'announcement' | 'maintainance' | 'promotion' | 'alert';
  /**
   * The title of the banner, displayed prominently.
   */
  title?: string | null;
  /**
   * The main content of the banner, providing details or information.
   */
  content: string;
  /**
   * Select the visual style of the banner. This affects its appearance and how it stands out on the page.
   */
  variant?: ('info' | 'warning' | 'success') | null;
  /**
   * If enabled, users can dismiss the banner, removing it from their view.
   */
  isDismissible?: boolean | null;
  /**
   * If enabled, the banner is active and visible to users.
   */
  isActive?: boolean | null;
  /**
   * The date from which the banner will be active. If not set, the banner is considered active immediately.
   */
  startDate?: string | null;
  /**
   * The date until which the banner will be active. If not set, the banner remains active indefinitely.
   */
  endDate?: string | null;
  /**
   * Call to Action (CTA) for the banner. This can include a label and a URL for users to follow.
   */
  cta?: {
    label?: string | null;
    url?: string | null;
    isExternal?: boolean | null;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-jobs".
 */
export interface PayloadJob {
  id: string;
  /**
   * Input data provided to the job
   */
  input?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  taskStatus?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  completedAt?: string | null;
  totalTried?: number | null;
  /**
   * If hasError is true this job will not be retried
   */
  hasError?: boolean | null;
  /**
   * If hasError is true, this is the error that caused it
   */
  error?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  /**
   * Task execution log
   */
  log?:
    | {
        executedAt: string;
        completedAt: string;
        taskSlug: 'inline' | 'checkServersSshConnections';
        taskID: string;
        input?:
          | {
              [k: string]: unknown;
            }
          | unknown[]
          | string
          | number
          | boolean
          | null;
        output?:
          | {
              [k: string]: unknown;
            }
          | unknown[]
          | string
          | number
          | boolean
          | null;
        state: 'failed' | 'succeeded';
        error?:
          | {
              [k: string]: unknown;
            }
          | unknown[]
          | string
          | number
          | boolean
          | null;
        id?: string | null;
      }[]
    | null;
  taskSlug?: ('inline' | 'checkServersSshConnections') | null;
  queue?: string | null;
  waitUntil?: string | null;
  processing?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: string;
  document?:
    | ({
        relationTo: 'users';
        value: string | User;
      } | null)
    | ({
        relationTo: 'projects';
        value: string | Project;
      } | null)
    | ({
        relationTo: 'services';
        value: string | Service;
      } | null)
    | ({
        relationTo: 'servers';
        value: string | Server;
      } | null)
    | ({
        relationTo: 'sshKeys';
        value: string | SshKey;
      } | null)
    | ({
        relationTo: 'gitProviders';
        value: string | GitProvider;
      } | null)
    | ({
        relationTo: 'deployments';
        value: string | Deployment;
      } | null)
    | ({
        relationTo: 'cloudProviderAccounts';
        value: string | CloudProviderAccount;
      } | null)
    | ({
        relationTo: 'templates';
        value: string | Template;
      } | null)
    | ({
        relationTo: 'securityGroups';
        value: string | SecurityGroup;
      } | null)
    | ({
        relationTo: 'dockerRegistries';
        value: string | DockerRegistry;
      } | null)
    | ({
        relationTo: 'tenants';
        value: string | Tenant;
      } | null)
    | ({
        relationTo: 'backups';
        value: string | Backup;
      } | null)
    | ({
        relationTo: 'banners';
        value: string | Banner;
      } | null)
    | ({
        relationTo: 'payload-jobs';
        value: string | PayloadJob;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: string;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: string;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  username?: T;
  avatarUrl?: T;
  onboarded?: T;
  role?: T;
  tenants?:
    | T
    | {
        tenant?: T;
        roles?: T;
        id?: T;
      };
  deletedAt?: T;
  updatedAt?: T;
  createdAt?: T;
  enableAPIKey?: T;
  apiKey?: T;
  apiKeyIndex?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "projects_select".
 */
export interface ProjectsSelect<T extends boolean = true> {
  _order?: T;
  tenant?: T;
  name?: T;
  description?: T;
  server?: T;
  services?: T;
  deletedAt?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "services_select".
 */
export interface ServicesSelect<T extends boolean = true> {
  tenant?: T;
  project?: T;
  backup?: T;
  name?: T;
  description?: T;
  type?: T;
  variables?:
    | T
    | {
        key?: T;
        value?: T;
        id?: T;
      };
  volumes?:
    | T
    | {
        hostPath?: T;
        containerPath?: T;
        created?: T;
        id?: T;
      };
  populatedVariables?: T;
  builder?: T;
  provider?: T;
  providerType?: T;
  githubSettings?:
    | T
    | {
        repository?: T;
        owner?: T;
        branch?: T;
        buildPath?: T;
        port?: T;
      };
  databaseDetails?:
    | T
    | {
        type?: T;
        username?: T;
        password?: T;
        host?: T;
        port?: T;
        connectionUrl?: T;
        version?: T;
        status?: T;
        exposedPorts?: T;
      };
  dockerDetails?:
    | T
    | {
        url?: T;
        account?: T;
        ports?:
          | T
          | {
              hostPort?: T;
              containerPort?: T;
              scheme?: T;
              id?: T;
            };
      };
  domains?:
    | T
    | {
        domain?: T;
        default?: T;
        synced?: T;
        autoRegenerateSSL?: T;
        certificateType?: T;
        id?: T;
      };
  deployments?: T;
  deletedAt?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "servers_select".
 */
export interface ServersSelect<T extends boolean = true> {
  tenant?: T;
  name?: T;
  description?: T;
  preferConnectionType?: T;
  sshKey?: T;
  ip?: T;
  port?: T;
  username?: T;
  hostname?: T;
  tailscale?:
    | T
    | {
        id?: T;
        nodeId?: T;
        name?: T;
        tailscaleHostname?: T;
        addresses?: T;
        blocksIncomingConnections?: T;
        os?: T;
        created?: T;
        authKey?: T;
        expires?: T;
        completeApiResponse?: T;
      };
  plugins?:
    | T
    | {
        name?: T;
        version?: T;
        status?: T;
        configuration?: T;
        id?: T;
      };
  domains?:
    | T
    | {
        domain?: T;
        default?: T;
        synced?: T;
        id?: T;
      };
  onboarded?: T;
  provider?: T;
  cloudProviderAccount?: T;
  awsEc2Details?:
    | T
    | {
        instanceId?: T;
        region?: T;
        imageId?: T;
        instanceType?: T;
        diskSize?: T;
        securityGroups?: T;
        launchTime?: T;
        state?: T;
        subnetId?: T;
        vpcId?: T;
        publicDnsName?: T;
        privateDnsName?: T;
        privateIpAddress?: T;
        publicIpAddress?: T;
        keyName?: T;
        architecture?: T;
      };
  intakeVpsDetails?:
    | T
    | {
        id?: T;
        instanceId?: T;
        status?: T;
        next_billing_date?: T;
      };
  connection?:
    | T
    | {
        status?: T;
        lastChecked?: T;
      };
  deletedAt?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "sshKeys_select".
 */
export interface SshKeysSelect<T extends boolean = true> {
  tenant?: T;
  name?: T;
  description?: T;
  publicKey?: T;
  privateKey?: T;
  deletedAt?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "gitProviders_select".
 */
export interface GitProvidersSelect<T extends boolean = true> {
  tenant?: T;
  type?: T;
  github?:
    | T
    | {
        appName?: T;
        appUrl?: T;
        appId?: T;
        clientId?: T;
        clientSecret?: T;
        installationId?: T;
        privateKey?: T;
        webhookSecret?: T;
        installationToken?: T;
        tokenExpiration?: T;
      };
  deletedAt?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "deployments_select".
 */
export interface DeploymentsSelect<T extends boolean = true> {
  service?: T;
  status?: T;
  logs?: T;
  deletedAt?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "cloudProviderAccounts_select".
 */
export interface CloudProviderAccountsSelect<T extends boolean = true> {
  tenant?: T;
  name?: T;
  type?: T;
  inTakeDetails?:
    | T
    | {
        accessToken?: T;
      };
  awsDetails?:
    | T
    | {
        accessKeyId?: T;
        secretAccessKey?: T;
      };
  gcpDetails?:
    | T
    | {
        serviceAccountKey?: T;
        projectId?: T;
      };
  digitaloceanDetails?:
    | T
    | {
        accessToken?: T;
      };
  azureDetails?:
    | T
    | {
        clientId?: T;
        clientSecret?: T;
        tenantId?: T;
        subscriptionId?: T;
      };
  deletedAt?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "templates_select".
 */
export interface TemplatesSelect<T extends boolean = true> {
  tenant?: T;
  name?: T;
  description?: T;
  imageUrl?: T;
  services?:
    | T
    | {
        type?: T;
        provider?: T;
        providerType?: T;
        githubSettings?:
          | T
          | {
              repository?: T;
              owner?: T;
              branch?: T;
              buildPath?: T;
              port?: T;
            };
        builder?: T;
        databaseDetails?:
          | T
          | {
              type?: T;
              exposedPorts?: T;
            };
        dockerDetails?:
          | T
          | {
              url?: T;
              account?: T;
              ports?:
                | T
                | {
                    hostPort?: T;
                    containerPort?: T;
                    scheme?: T;
                    id?: T;
                  };
            };
        name?: T;
        description?: T;
        volumes?:
          | T
          | {
              hostPath?: T;
              containerPath?: T;
              id?: T;
            };
        variables?:
          | T
          | {
              key?: T;
              value?: T;
              id?: T;
            };
        id?: T;
      };
  isPublished?: T;
  publishedTemplateId?: T;
  deletedAt?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "securityGroups_select".
 */
export interface SecurityGroupsSelect<T extends boolean = true> {
  tenant?: T;
  name?: T;
  description?: T;
  cloudProvider?: T;
  cloudProviderAccount?: T;
  inboundRules?:
    | T
    | {
        description?: T;
        type?: T;
        protocol?: T;
        fromPort?: T;
        toPort?: T;
        sourceType?: T;
        source?: T;
        securityGroupRuleId?: T;
        id?: T;
      };
  outboundRules?:
    | T
    | {
        description?: T;
        type?: T;
        protocol?: T;
        fromPort?: T;
        toPort?: T;
        destinationType?: T;
        destination?: T;
        securityGroupRuleId?: T;
        id?: T;
      };
  tags?:
    | T
    | {
        key?: T;
        value?: T;
        id?: T;
      };
  securityGroupId?: T;
  syncStatus?: T;
  lastSyncedAt?: T;
  deletedAt?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "dockerRegistries_select".
 */
export interface DockerRegistriesSelect<T extends boolean = true> {
  tenant?: T;
  name?: T;
  type?: T;
  username?: T;
  password?: T;
  deletedAt?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "tenants_select".
 */
export interface TenantsSelect<T extends boolean = true> {
  name?: T;
  slug?: T;
  subdomain?: T;
  deletedAt?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "backups_select".
 */
export interface BackupsSelect<T extends boolean = true> {
  tenant?: T;
  service?: T;
  type?: T;
  backupName?: T;
  status?: T;
  deletedAt?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "banners_select".
 */
export interface BannersSelect<T extends boolean = true> {
  name?: T;
  scope?: T;
  tenant?: T;
  type?: T;
  title?: T;
  content?: T;
  variant?: T;
  isDismissible?: T;
  isActive?: T;
  startDate?: T;
  endDate?: T;
  cta?:
    | T
    | {
        label?: T;
        url?: T;
        isExternal?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-jobs_select".
 */
export interface PayloadJobsSelect<T extends boolean = true> {
  input?: T;
  taskStatus?: T;
  completedAt?: T;
  totalTried?: T;
  hasError?: T;
  error?: T;
  log?:
    | T
    | {
        executedAt?: T;
        completedAt?: T;
        taskSlug?: T;
        taskID?: T;
        input?: T;
        output?: T;
        state?: T;
        error?: T;
        id?: T;
      };
  taskSlug?: T;
  queue?: T;
  waitUntil?: T;
  processing?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CheckServersSshConnections".
 */
export interface CheckServersSshConnections {
  input: {
    serverId?: string | null;
  };
  output: {
    checkedServers: {
      id: string;
      name: string;
      status: string;
      error?: string | null;
    }[];
    successCount: number;
    failedCount: number;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}
