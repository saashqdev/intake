name: Docker Build and Publish Workflow

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

on:
  workflow_dispatch:
  schedule:
    # Every day at 16:19 UTC
    # This is to ensure the image is built and pushed daily
    # and to keep the cache fresh.
    - cron: '19 16 * * *'
  push:
    # Only run on pushes to the main branch
    # This is to ensure that the image is built and pushed
    # only when changes are made to the main branch.
    branches: ['main']
    # Publish semver tags as releases.
    tags: ['v*.*.*']
  pull_request:
    branches: ['main']

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}
  TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write

    steps:
      # Checkout the repository to get the Dockerfile and other files
      - name: Checkout repository
        uses: actions/checkout@v4

      # Install the cosign tool except on PR
      # This is used to sign the Docker image with a signature
      # and to verify the image signature.
      # https://github.com/sigstore/cosign-installer
      - name: Install cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@6e04d228eb30da1757ee4e1dd75a0ec73a653e06 #v3.1.1
        with:
          cosign-release: 'v2.1.1'

      # Set up BuildKit Docker container builder to be able to build
      # multi-platform images and export cache to GitHub Packages.
      # This is required for the docker/build-push-action to work properly.
      # https://github.com/docker/setup-buildx-action
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226 # v3.0.0

      # Login against a Docker registry except on PR
      # This is used to push the Docker image to the registry.
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ env.TOKEN }}

      # # Extract metadata (tags, labels) for Docker
      # # https://github.com/docker/metadata-action
      # - name: Extract Docker metadata
      #   id: meta
      #   uses: docker/metadata-action@96383f45573cb7f253c731d3b3ab81c87ef81934 # v5.0.0
      #   with:
      #     images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      # Build and push Docker image with Buildx (don't push on PR)
      # This is used to build the Docker image and push it to the registry.
      # The image is built with the Dockerfile in the repository root.
      # The image is tagged with the registry and repository name.
      # The image is built for the linux/amd64 platform.
      # The build arguments are passed to the Dockerfile.
      # The image is pushed to the registry if the event is not a pull request.
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@0565240e2d4ab88bba5387d719585280857ece09 # v5.0.0
        with:
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          platforms: linux/amd64
          build-args: |
            DATABASE_URI=${{ secrets.DATABASE_URI }}
            PAYLOAD_SECRET=${{ secrets.PAYLOAD_SECRET }}
            NEXT_PUBLIC_WEBSITE_URL=${{ secrets.NEXT_PUBLIC_WEBSITE_URL }}
            REDIS_URI=${{ secrets.REDIS_URI }}
            RESEND_API_KEY=${{ secrets.RESEND_API_KEY }}
            RESEND_SENDER_EMAIL=${{ secrets.RESEND_SENDER_EMAIL }}
            RESEND_SENDER_NAME=${{ secrets.RESEND_SENDER_NAME }}
            TAILSCALE_OAUTH_CLIENT_SECRET=${{ secrets.TAILSCALE_OAUTH_CLIENT_SECRET }}
            TAILSCALE_TAILNET=${{ secrets.TAILSCALE_TAILNET }}
            NEXT_PUBLIC_WEBHOOK_URL=${{ secrets.NEXT_PUBLIC_WEBHOOK_URL }}
            NEXT_PUBLIC_INTAKE_TELEMETRY_DISABLED=${{ secrets.NEXT_PUBLIC_INTAKE_TELEMETRY_DISABLED }}
            NEXT_PUBLIC_BETTER_STACK_SOURCE_TOKEN=${{ secrets.NEXT_PUBLIC_BETTER_STACK_SOURCE_TOKEN }}
            NEXT_PUBLIC_BETTER_STACK_INGESTING_URL=${{secrets.NEXT_PUBLIC_BETTER_STACK_INGESTING_URL}}
            NEXT_PUBLIC_PROXY_DOMAIN_URL=${{ secrets.NEXT_PUBLIC_PROXY_DOMAIN_URL }}
            NEXT_PUBLIC_PROXY_CNAME=${{ secrets.NEXT_PUBLIC_PROXY_CNAME }}
            NEXT_PUBLIC_DISCORD_INVITE_URL=${{ secrets.NEXT_PUBLIC_DISCORD_INVITE_URL }}
